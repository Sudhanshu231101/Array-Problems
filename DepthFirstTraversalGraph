#include<bits/stdc++.h>
using namespace std;

bool visitedDFS[6];

void addEdge(vector<int> adj[], int m, int n){
    adj[m].push_back(n);
}

void printBFS(vector<int> adj[], int s,int v){
    bool visited[v+1];
    for(int i=0;i<=v;i++){
        visited[i]=false;
    }
    queue <int> q;
    q.push(s);
    visited[s]=true;
    while(!q.empty()){
        int temp=q.front();
        q.pop();
        cout<<temp<<",";
        for(auto j=adj[temp].begin();j!=adj[temp].end();j++){
            int index=*j;
            if(!visited[index]){
                q.push(index);
                visited[index]=true;
            }
            
        }
    }
}

void printDFS(vector<int> adj[],int s, int v){
    visitedDFS[s]=true;
    cout<<s<<" , ";
    for(auto i=adj[s].begin();i!=adj[s].end();i++){
        if(!visitedDFS[*i]){
            printDFS(adj,*i,v);
        }
    }
    
}

void printAdjacencyList(vector<int> adj[], int v){
    for(int i=1;i<=v;i++){
        cout<<i<<"-->";
        for(auto j=adj[i].begin();j!=adj[i].end();j++){
            cout<<*j<<",";
        }
        cout<<endl;
    }
}

int main(){
    int e,v;
    e=6;
    v=5;
    
    vector<int> adj[v+1];
    
    addEdge(adj,1,2);
    addEdge(adj,1,3);
    addEdge(adj,2,4);
    addEdge(adj,3,4);
    addEdge(adj,2,5);
    addEdge(adj,4,5);
    
    printAdjacencyList(adj,v);
    
    cout<<"BFS Traversal is = ";
    
    printBFS(adj,1,v);
    
    cout<<endl;
    
    cout<<"DFS Traversal is = ";
    
    printDFS(adj,1,v);
    
    return 0;
    
    
}
